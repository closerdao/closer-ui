import Head from 'next/head';

import { useEffect, useState } from 'react';

import Tabs from 'closer/components/Tabs';
import { Card, Heading } from 'closer/components/ui';

import { FaCalendarAlt } from '@react-icons/all-files/fa/FaCalendarAlt';
import { FaCoins } from '@react-icons/all-files/fa/FaCoins';
import { FaEuroSign } from '@react-icons/all-files/fa/FaEuroSign';
import { FaUsers } from '@react-icons/all-files/fa/FaUsers';
import { usePlatform } from 'closer';
import { NextPageContext } from 'next';
import { useTranslations } from 'next-intl';

import PageNotAllowed from '../401';
import { useAuth } from '../../contexts/auth';
import { loadLocaleData } from '../../utils/locale.helpers';

// Majority of this code has been generated by the AI
// Issue description: https://github.com/closerdao/closer-ui/issues/594
// Current status: WIP (work in progress)
// Awaiting API endpoints to retrieve data

const StatsCard = ({
  title,
  value,
  icon,
  subtext,
}: {
  title: string;
  value: string;
  icon?: any;
  subtext: string;
}) => {
  return (
    <Card className="col-span-1">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-600">{title}</p>
          <p className="text-2xl font-semibold mt-1">{value}</p>
          <p className="text-sm mt-1">{subtext}</p>
        </div>
        {icon && <div className="text-gray-400">{icon}</div>}
      </div>
    </Card>
  );
};

const TabOverview = (
  <div className="mt-8 grid grid-cols-1 gap-6 lg:grid-cols-2">
    <div className="bg-white rounded-lg shadow p-6">
      <Heading level={3}>Revenue Distribution</Heading>
    </div>
    <div className="bg-white rounded-lg shadow p-6">
      <Heading level={3}>Monthly Performance</Heading>
    </div>
  </div>
);

const TabRevenue = (
  <div className="mt-8">
    <div className="bg-white rounded-lg shadow p-6">
      <Heading level={3}>Revenue Tracking tab</Heading>
    </div>
  </div>
);

const TabTokenSale = (
  <div className="mt-8">
    <div className="bg-white rounded-lg shadow p-6">
      <Heading level={3}>Token Sales tab</Heading>
    </div>
  </div>
);

const TabAnalytics = (
  <div className="mt-8">
    <div className="bg-white rounded-lg shadow p-6">
      <Heading level={3}>Referra Analytics tab</Heading>
    </div>
  </div>
);

const AffiliateDashboard = () => {
  const t = useTranslations();
  const { platform }: any = usePlatform();
  const { user, isAuthenticated }: any = useAuth();

  console.log('user=', user && user);
  const [dateRange, setDateRange] = useState('30d'); // TODO: unsure if supported by the API (please fact check)

  const [totalEarnings, setTotalEarnings] = useState(0);
  const [totalReferrals, setTotalReferrals] = useState(0);
  const [activeSubscriptions, setActiveSubscriptions] = useState(0);
  const [tokensSales, setTokensSales] = useState(0);

  // const [totalEarningsFilter, setTotalEarningsFilter] = useState({});
  // const [totalReferralsFilter, setTotalReferralsFilter] = useState({});
  const [activeSubscriptionsFilter, setActiveSubscriptionsFilter] = useState(
    {},
  );
  const [tokensSalesFilter, setTokensSalesFilter] = useState({});

  const isLocal =
    process.env.NEXT_PUBLIC_PLATFORM_URL === 'http://localhost:3000'; // mocking data for local development

  // Update filters when the user is authenticated
  // Futher down the line we pass these filters as dependency to `useEffect` to load data based on the user._id
  // useEffect(() => {
  //   if (isAuthenticated && user?._id) {
  //     setTotalEarningsFilter({ where: {} }); // TODO: add me later when present on the model: referredBy: user._id
  //     // setTotalReferralsFilter({
  //     //   where: { referredBy: user._id },
  //     // });
  //     setActiveSubscriptionsFilter({ where: { referredBy: user._id } });
  //     setTokensSalesFilter({ where: {} }); // TODO: add me later
  //   } else {
  //     setTotalEarningsFilter({});
  //     // setTotalReferralsFilter({});
  //     setActiveSubscriptionsFilter({});
  //     setTokensSalesFilter({});
  //   }
  // }, [user?._id, isAuthenticated]);

  // useEffect(() => {
  //   const loadData = async () => {
  //     if (!totalEarningsFilter) return;
  //     try {
  //       const result = await Promise.all([
  //         platform.charge.sum(totalEarningsFilter),
  //       ]);
  //       setTotalEarnings(result[0].results);
  //     } catch (err) {
  //       console.error('Error loading data:', err);
  //     }
  //   };

  //   loadData();
  // }, [totalEarningsFilter]);

  
  const referralsFilter =  {
    where: { referredBy: user?._id },
  };
  const referrals = platform.user.find(referralsFilter);



  console.log('referrals=', referrals && referrals.toJS());

  const loadReferrals = async () => {
    const result = await platform.user.get(referralsFilter)
    // platform.user.get(hostsFilter),
    const referrals = result.results.toJS().map((r:any) => r._id);

    console.log('referrals=', referrals);
    // const totalEarningsFilter = {
    //   where: {
    //     ceratedBy: {
    //       $in: referrals
    //     },
    //   },
    // };
    const totalEarningsFilter = {
      where: {
        createdBy: '67890d3300bc5e66797f8e6b'
      },
    };
    // vashnev+11 id: "64b564600317811cf0d35a8b"
// vashnev++ id: 67890d3300bc5e66797f8e6b
    const totalEarnings = await platform.charge.get(totalEarningsFilter);
      
    
    console.log('totalEarnings=', totalEarnings && totalEarnings.results.toJS());
    // console.log('totalEarnings=', totalEarnings && totalEarnings);
  };

  useEffect(() => {
    if (user) {
      loadReferrals();
    }
  }, [referralsFilter, user]);

  // useEffect(() => {
  //   const loadData = async () => {
  //     if (!totalReferralsFilter) return;
  //     try {
  //       const result = await Promise.all([
  //         platform.user.get(totalReferralsFilter),
  //       ]);

  //       console.log('result[0].results=', result[0].results?.toJS());
  //       setTotalReferrals(result[0].results);
  //     } catch (err) {
  //       console.error('Error loading data:', err);
  //     }
  //   };

  //   loadData();
  // }, [totalReferralsFilter]);

  useEffect(() => {
    const loadData = async () => {
      if (!activeSubscriptionsFilter) return;
      try {
        const result = await Promise.all([
          platform.user.getCount(activeSubscriptionsFilter),
        ]);
        setActiveSubscriptions(result[0].results);
      } catch (err) {
        console.error('Error loading data:', err);
      }
    };

    loadData();
  }, [activeSubscriptionsFilter]);

  // useEffect(() => {
  //   const loadData = async () => {
  //     if (!totalEarningsFilter) return;
  //     try {
  //       if (isLocal) {
  //         setTokensSales(12345); // FYI: mocking data in the simplest way possible
  //       } else {
  //         // TODO: implement the actual API enpoint
  //       }
  //     } catch (err) {
  //       console.error('Error loading data:', err);
  //     }
  //   };

  //   loadData();
  // }, [tokensSalesFilter]);

  // TODO: avoid FOUC-ish (flash of unstyled content) pedantic issue where "No access" is visible for a second
  if (!user) {
    return <PageNotAllowed />;
  }

  const tabs = [
    { value: 'overview', title: t('overview'), content: TabOverview },
    { value: 'revenue', title: t('revenue_tracking'), content: TabRevenue },
    { value: 'tokens', title: t('token_sales'), content: TabTokenSale },
    {
      value: 'analytics',
      title: t('referral_analytics'),
      content: TabAnalytics,
    },
  ];

  return (
    <>
      <Head>
        <title>{`${t('affiliate_dashboard')}`}</title>
      </Head>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex justify-between items-center mb-8">
          <Heading level={1}>ü§ù {t('affiliate_dashboard')}</Heading>

          <div className="flex gap-4">
            <select
              value={dateRange}
              onChange={(e) => setDateRange(e.target.value)}
              className="rounded-md border-gray-300"
            >
              <option value="7d">Last 7 days</option>
              <option value="30d">Last 30 days</option>
              <option value="90d">Last 90 days</option>
              <option value="1y">Last year</option>
            </select>
          </div>
        </div>

        <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6">
          <StatsCard
            title={t('stats_total_earnings')}
            value={`‚Ç¨${totalEarnings}`}
            icon={<FaEuroSign className="text-2xl" />}
            subtext={t('stats_earnings_subtext')}
          />
          <StatsCard
            title={t('stats_total_referrals')}
            value={'' + totalReferrals}
            icon={<FaUsers className="text-2xl" />}
            subtext={t('stats_referrals_subtext')}
          />
          <StatsCard
            title={t('stats_active_subscriptions')}
            value={'' + activeSubscriptions}
            icon={<FaCalendarAlt className="text-2xl" />}
            subtext={t('stats_subscriptions_subtext')}
          />
          <StatsCard
            title={t('stats_token_sales')}
            value={`${tokensSales} TDF`}
            icon={<FaCoins className="text-2xl" />}
            subtext={t('stats_tokens_subtext')}
          />
        </div>

        <Tabs tabs={tabs} />
      </div>
    </>
  );
};

AffiliateDashboard.getInitialProps = async (context: NextPageContext) => {
  try {
    const messages = await loadLocaleData(
      context?.locale,
      process.env.NEXT_PUBLIC_APP_NAME,
    );
    return {
      messages,
    };
  } catch (err: unknown) {
    return {
      messages: null,
    };
  }
};

export default AffiliateDashboard;
